//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `helvetica.ttf`.
    static let helveticaTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "helvetica", pathExtension: "ttf")
    /// Resource file `helveticaBold.ttf`.
    static let helveticaBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "helveticaBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "helvetica", withExtension: "ttf")`
    static func helveticaTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "helveticaBold", withExtension: "ttf")`
    static func helveticaBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helveticaBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `HelveticaNeue-Bold`.
    static let helveticaNeueBold = Rswift.FontResource(fontName: "HelveticaNeue-Bold")
    /// Font `HelveticaNeue`.
    static let helveticaNeue = Rswift.FontResource(fontName: "HelveticaNeue")

    /// `UIFont(name: "HelveticaNeue", size: ...)`
    static func helveticaNeue(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeue, size: size)
    }

    /// `UIFont(name: "HelveticaNeue-Bold", size: ...)`
    static func helveticaNeueBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: helveticaNeueBold, size: size)
    }

    static func validate() throws {
      if R.font.helveticaNeue(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue' could not be loaded, is 'helvetica.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.helveticaNeueBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'HelveticaNeue-Bold' could not be loaded, is 'helveticaBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `Back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    /// Image `blog`.
    static let blog = Rswift.ImageResource(bundle: R.hostingBundle, name: "blog")
    /// Image `buzon`.
    static let buzon = Rswift.ImageResource(bundle: R.hostingBundle, name: "buzon")
    /// Image `car`.
    static let car = Rswift.ImageResource(bundle: R.hostingBundle, name: "car")
    /// Image `iconDown16`.
    static let iconDown16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDown16")
    /// Image `iconEmptyState`.
    static let iconEmptyState = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEmptyState")
    /// Image `iconSearchBar`.
    static let iconSearchBar = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSearchBar")
    /// Image `medicamentos`.
    static let medicamentos = Rswift.ImageResource(bundle: R.hostingBundle, name: "medicamentos")
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `pedidos`.
    static let pedidos = Rswift.ImageResource(bundle: R.hostingBundle, name: "pedidos")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `send`.
    static let send = Rswift.ImageResource(bundle: R.hostingBundle, name: "send")
    /// Image `toFarmaLogo2`.
    static let toFarmaLogo2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "toFarmaLogo2")
    /// Image `toFarmaLogo`.
    static let toFarmaLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "toFarmaLogo")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blog", bundle: ..., traitCollection: ...)`
    static func blog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buzon", bundle: ..., traitCollection: ...)`
    static func buzon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buzon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "car", bundle: ..., traitCollection: ...)`
    static func car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDown16", bundle: ..., traitCollection: ...)`
    static func iconDown16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDown16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEmptyState", bundle: ..., traitCollection: ...)`
    static func iconEmptyState(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEmptyState, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSearchBar", bundle: ..., traitCollection: ...)`
    static func iconSearchBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearchBar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "medicamentos", bundle: ..., traitCollection: ...)`
    static func medicamentos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.medicamentos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pedidos", bundle: ..., traitCollection: ...)`
    static func pedidos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pedidos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "send", bundle: ..., traitCollection: ...)`
    static func send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.send, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toFarmaLogo", bundle: ..., traitCollection: ...)`
    static func toFarmaLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toFarmaLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toFarmaLogo2", bundle: ..., traitCollection: ...)`
    static func toFarmaLogo2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toFarmaLogo2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 16 localization keys.
    struct localizable {
      /// Base translation: BLOG
      ///
      /// Locales: Base
      static let blog = Rswift.StringResource(key: "blog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: BUZÓN
      ///
      /// Locales: Base
      static let chat_titulo = Rswift.StringResource(key: "chat_titulo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: CLAVE
      ///
      /// Locales: Base
      static let registro_Clave = Rswift.StringResource(key: "registro_Clave", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: CORREO ELECTRÓNICO
      ///
      /// Locales: Base
      static let registro_Correo = Rswift.StringResource(key: "registro_Correo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Categorias
      ///
      /// Locales: Base
      static let pedidos_categorias = Rswift.StringResource(key: "pedidos_categorias", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: INICIAR SESIÓN
      ///
      /// Locales: Base
      static let iniciar_sesion = Rswift.StringResource(key: "iniciar_sesion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: INICIO DE SESIÓN
      ///
      /// Locales: Base
      static let inicio_sesion = Rswift.StringResource(key: "inicio_sesion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Iniciar
      ///
      /// Locales: Base
      static let logIn_Iniciar = Rswift.StringResource(key: "logIn_Iniciar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: MEDICAMENTOS
      ///
      /// Locales: Base
      static let medicamentos_titulo = Rswift.StringResource(key: "medicamentos_titulo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Nombre
      ///
      /// Locales: Base
      static let registro_Nombre = Rswift.StringResource(key: "registro_Nombre", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: PEDIDOS
      ///
      /// Locales: Base
      static let pedidos_titulo = Rswift.StringResource(key: "pedidos_titulo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: REGISTRO
      ///
      /// Locales: Base
      static let registro_Registrar = Rswift.StringResource(key: "registro_Registrar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Registrarse
      ///
      /// Locales: Base
      static let logIn_Registrarse = Rswift.StringResource(key: "logIn_Registrarse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SOLICITAR REGISTRO
      ///
      /// Locales: Base
      static let registro_SolicitarRegistro = Rswift.StringResource(key: "registro_SolicitarRegistro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: TELÉFONO
      ///
      /// Locales: Base
      static let registro_Telefono = Rswift.StringResource(key: "registro_Telefono", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: VER MÁS
      ///
      /// Locales: Base
      static let ver_mas = Rswift.StringResource(key: "ver_mas", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)

      /// Base translation: BLOG
      ///
      /// Locales: Base
      static func blog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blog", bundle: hostingBundle, value: "BLOG", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blog"
        }

        return NSLocalizedString("blog", bundle: bundle, value: "BLOG", comment: "")
      }

      /// Base translation: BUZÓN
      ///
      /// Locales: Base
      static func chat_titulo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("chat_titulo", bundle: hostingBundle, value: "BUZÓN", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "chat_titulo"
        }

        return NSLocalizedString("chat_titulo", bundle: bundle, value: "BUZÓN", comment: "")
      }

      /// Base translation: CLAVE
      ///
      /// Locales: Base
      static func registro_Clave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registro_Clave", bundle: hostingBundle, value: "CLAVE", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registro_Clave"
        }

        return NSLocalizedString("registro_Clave", bundle: bundle, value: "CLAVE", comment: "")
      }

      /// Base translation: CORREO ELECTRÓNICO
      ///
      /// Locales: Base
      static func registro_Correo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registro_Correo", bundle: hostingBundle, value: "CORREO ELECTRÓNICO", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registro_Correo"
        }

        return NSLocalizedString("registro_Correo", bundle: bundle, value: "CORREO ELECTRÓNICO", comment: "")
      }

      /// Base translation: Categorias
      ///
      /// Locales: Base
      static func pedidos_categorias(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pedidos_categorias", bundle: hostingBundle, value: "Categorias", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pedidos_categorias"
        }

        return NSLocalizedString("pedidos_categorias", bundle: bundle, value: "Categorias", comment: "")
      }

      /// Base translation: INICIAR SESIÓN
      ///
      /// Locales: Base
      static func iniciar_sesion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iniciar_sesion", bundle: hostingBundle, value: "INICIAR SESIÓN", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "iniciar_sesion"
        }

        return NSLocalizedString("iniciar_sesion", bundle: bundle, value: "INICIAR SESIÓN", comment: "")
      }

      /// Base translation: INICIO DE SESIÓN
      ///
      /// Locales: Base
      static func inicio_sesion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("inicio_sesion", bundle: hostingBundle, value: "INICIO DE SESIÓN", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "inicio_sesion"
        }

        return NSLocalizedString("inicio_sesion", bundle: bundle, value: "INICIO DE SESIÓN", comment: "")
      }

      /// Base translation: Iniciar
      ///
      /// Locales: Base
      static func logIn_Iniciar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logIn_Iniciar", bundle: hostingBundle, value: "Iniciar", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logIn_Iniciar"
        }

        return NSLocalizedString("logIn_Iniciar", bundle: bundle, value: "Iniciar", comment: "")
      }

      /// Base translation: MEDICAMENTOS
      ///
      /// Locales: Base
      static func medicamentos_titulo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("medicamentos_titulo", bundle: hostingBundle, value: "MEDICAMENTOS", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "medicamentos_titulo"
        }

        return NSLocalizedString("medicamentos_titulo", bundle: bundle, value: "MEDICAMENTOS", comment: "")
      }

      /// Base translation: Nombre
      ///
      /// Locales: Base
      static func registro_Nombre(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registro_Nombre", bundle: hostingBundle, value: "Nombre", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registro_Nombre"
        }

        return NSLocalizedString("registro_Nombre", bundle: bundle, value: "Nombre", comment: "")
      }

      /// Base translation: PEDIDOS
      ///
      /// Locales: Base
      static func pedidos_titulo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pedidos_titulo", bundle: hostingBundle, value: "PEDIDOS", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pedidos_titulo"
        }

        return NSLocalizedString("pedidos_titulo", bundle: bundle, value: "PEDIDOS", comment: "")
      }

      /// Base translation: REGISTRO
      ///
      /// Locales: Base
      static func registro_Registrar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registro_Registrar", bundle: hostingBundle, value: "REGISTRO", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registro_Registrar"
        }

        return NSLocalizedString("registro_Registrar", bundle: bundle, value: "REGISTRO", comment: "")
      }

      /// Base translation: Registrarse
      ///
      /// Locales: Base
      static func logIn_Registrarse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logIn_Registrarse", bundle: hostingBundle, value: "Registrarse", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logIn_Registrarse"
        }

        return NSLocalizedString("logIn_Registrarse", bundle: bundle, value: "Registrarse", comment: "")
      }

      /// Base translation: SOLICITAR REGISTRO
      ///
      /// Locales: Base
      static func registro_SolicitarRegistro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registro_SolicitarRegistro", bundle: hostingBundle, value: "SOLICITAR REGISTRO", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registro_SolicitarRegistro"
        }

        return NSLocalizedString("registro_SolicitarRegistro", bundle: bundle, value: "SOLICITAR REGISTRO", comment: "")
      }

      /// Base translation: TELÉFONO
      ///
      /// Locales: Base
      static func registro_Telefono(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registro_Telefono", bundle: hostingBundle, value: "TELÉFONO", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registro_Telefono"
        }

        return NSLocalizedString("registro_Telefono", bundle: bundle, value: "TELÉFONO", comment: "")
      }

      /// Base translation: VER MÁS
      ///
      /// Locales: Base
      static func ver_mas(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ver_mas", bundle: hostingBundle, value: "VER MÁS", comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ver_mas"
        }

        return NSLocalizedString("ver_mas", bundle: bundle, value: "VER MÁS", comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
